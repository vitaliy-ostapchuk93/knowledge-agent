name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  # Quick validation for fast feedback
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Skip duplicate actions
        id: skip-check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content_newer'
          paths_ignore: '["**/README.md", "**/docs/**", "**/*.md"]'

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Fast type check
        run: bunx tsc --noEmit --skipLibCheck

      - name: Fast lint check
        run: bun run lint --max-warnings 0

  # Parallel build and test jobs
  build:
    needs: validate
    if: needs.validate.outputs.should-skip != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Build project
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  test:
    needs: validate
    if: needs.validate.outputs.should-skip != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-suite: [unit, integration, architecture]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          case "${{ matrix.test-suite }}" in
            "unit")
              bun test tests/unit/ --coverage --coverage-reporter=lcov
              ;;
            "integration")
              if ls tests/integration/*.test.ts 1> /dev/null 2>&1; then
                echo "Running integration tests..."
                bun test tests/integration/ --timeout 30000
              else
                echo "No integration tests found, skipping."
              fi
              ;;
            "architecture")
              bun test tests/architecture/ --timeout 15000
              ;;
          esac

      - name: Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Combined validation job
  quality-checks:
    needs: [build, test]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Security audit
        run: bun audit --format json | tee security-audit.json || true

      - name: Check for security vulnerabilities
        run: |
          if [ -s security-audit.json ] && grep -q '"vulnerabilities"' security-audit.json; then
            echo "⚠️ Security vulnerabilities found"
            cat security-audit.json
            echo "security_issues=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No security vulnerabilities detected"
            echo "security_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Performance baseline
        run: |
          echo "Running performance baseline checks..."
          time bun test tests/unit/ --silent > /dev/null
          echo "✅ Performance baseline completed"

  # Final validation
  ci-success:
    needs: [validate, build, test, quality-checks]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.validate.result }}" != "success" ]] ||
             [[ "${{ needs.build.result }}" != "success" ]] ||
             [[ "${{ needs.test.result }}" != "success" ]] ||
             [[ "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline completed successfully"
          fi
