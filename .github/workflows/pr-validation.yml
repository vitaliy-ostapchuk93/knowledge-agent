name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Fast PR validation checks
  pr-validation:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun
      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Validating PR title: $PR_TITLE"

          if ! echo "$PR_TITLE" | grep -Eq '^(feat|fix|docs|style|refactor|test|chore|ci|perf|build)(\(.+\))?: .+'; then
            echo "‚ùå PR title does not follow conventional commit format"
            echo "Expected: type(scope): description"
            echo "Examples: feat: add new feature, fix(core): resolve bug, docs: update README"
            exit 1
          else
            echo "‚úÖ PR title follows conventional commit format"
          fi

      - name: Check merge conflicts
        run: |
          echo "Checking for merge conflicts..."
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=50

          if git merge-tree $(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }}) HEAD origin/${{ github.event.pull_request.base.ref }} | grep -q "<<<<<<< "; then
            echo "‚ùå PR has merge conflicts - please resolve them"
            exit 1
          else
            echo "‚úÖ No merge conflicts detected"
          fi

      - name: Quick type check
        run: |
          echo "Running TypeScript type check..."
          bunx tsc --noEmit --skipLibCheck

      - name: Critical architecture tests
        run: |
          echo "Running critical architecture tests..."
          bun test tests/architecture/ --timeout 15000

      - name: PR size check
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
          ADDED_LINES=$(git diff --numstat origin/${{ github.event.pull_request.base.ref }}...HEAD | awk '{added+=$1} END {print added+0}')
          DELETED_LINES=$(git diff --numstat origin/${{ github.event.pull_request.base.ref }}...HEAD | awk '{deleted+=$2} END {print deleted+0}')

          echo "üìä PR Statistics:"
          echo "- Files changed: $CHANGED_FILES"
          echo "- Lines added: $ADDED_LINES"
          echo "- Lines deleted: $DELETED_LINES"

          if [ $CHANGED_FILES -gt 50 ] || [ $ADDED_LINES -gt 1000 ]; then
            echo "‚ö†Ô∏è Large PR detected - consider breaking into smaller PRs"
          else
            echo "‚úÖ PR size is reasonable"
          fi

  # Impact analysis and targeted testing
  impact-analysis:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    timeout-minutes: 10
    outputs:
      core-changed: ${{ steps.analyze.outputs.core-changed }}
      interfaces-changed: ${{ steps.analyze.outputs.interfaces-changed }}
      tests-required: ${{ steps.analyze.outputs.tests-required }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes
        id: analyze
        run: |
          echo "üîç Analyzing change impact..."
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=50

          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Categorize changes
          CORE_CHANGES=$(echo "$CHANGED_FILES" | grep -c "^src/core/" || echo "0")
          INTERFACE_CHANGES=$(echo "$CHANGED_FILES" | grep -c "^src/interfaces/" || echo "0")
          TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -c "^tests/" || echo "0")
          DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -c "\.md$\|^docs/" || echo "0")
          CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -c "package\.json\|tsconfig\.json\|eslint\.config\.js" || echo "0")

          # Set outputs
          echo "core-changed=$([ $CORE_CHANGES -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "interfaces-changed=$([ $INTERFACE_CHANGES -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "tests-required=$([ $CORE_CHANGES -gt 0 ] || [ $INTERFACE_CHANGES -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

          # Print summary
          echo "üìä Change Summary:"
          echo "- Core changes: $CORE_CHANGES files"
          echo "- Interface changes: $INTERFACE_CHANGES files"
          echo "- Test changes: $TEST_CHANGES files"
          echo "- Documentation changes: $DOC_CHANGES files"
          echo "- Configuration changes: $CONFIG_CHANGES files"

          # Determine required checks
          if [ "$CORE_CHANGES" -gt 0 ] || [ "$INTERFACE_CHANGES" -gt 0 ]; then
            echo "needs_full_test=true" >> $GITHUB_OUTPUT
            echo "needs_arch_check=true" >> $GITHUB_OUTPUT
          fi

  # Targeted testing based on changes
  targeted-tests:
    needs: impact-analysis
    if: needs.impact-analysis.outputs.tests-required == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Run targeted tests
        run: |
          echo "üéØ Running targeted tests based on changes..."

          if [[ "${{ needs.impact-analysis.outputs.core-changed }}" == "true" ]]; then
            echo "Running core tests..."
            bun test tests/unit/core/ --timeout 20000
          fi

          if [[ "${{ needs.impact-analysis.outputs.interfaces-changed }}" == "true" ]]; then
            echo "Running interface compliance tests..."
            bun test tests/architecture/ --timeout 15000
          fi

      - name: Test summary
        run: |
          echo "‚úÖ Targeted testing completed successfully"
          echo "Changes validated for:"
          echo "- Core components: ${{ needs.impact-analysis.outputs.core-changed }}"
          echo "- Interfaces: ${{ needs.impact-analysis.outputs.interfaces-changed }}"
