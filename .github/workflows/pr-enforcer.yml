name: PR Format Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Validate PR format and requirements
  pr-format-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Validate branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Checking branch name: $BRANCH_NAME"

          # Define valid branch prefixes
          VALID_PREFIXES="feature/ bugfix/ hotfix/ chore/ docs/ test/ refactor/"

          # Check if branch follows naming convention
          VALID_BRANCH=false
          for prefix in $VALID_PREFIXES; do
            if [[ $BRANCH_NAME == $prefix* ]]; then
              VALID_BRANCH=true
              break
            fi
          done

          if [[ $VALID_BRANCH == false ]]; then
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "Branch name must start with one of: $VALID_PREFIXES"
            echo "Examples:"
            echo "  - feature/user-authentication"
            echo "  - bugfix/fix-login-issue"
            echo "  - chore/update-dependencies"
            echo "  - docs/improve-readme"
            exit 1
          fi

          echo "✅ Branch name follows convention: $BRANCH_NAME"

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Checking PR title: $PR_TITLE"

          # Define valid PR title prefixes (Conventional Commits)
          VALID_TYPES=("feat:" "fix:" "docs:" "style:" "refactor:" "test:" "chore:" "perf:" "ci:" "build:" "revert:")

          # Check if title follows conventional commits
          VALID_TITLE=false
          for type in "${VALID_TYPES[@]}"; do
            if [[ $PR_TITLE == $type* ]]; then
              VALID_TITLE=true
              break
            fi
          done

          if [[ $VALID_TITLE == false ]]; then
            echo "❌ Invalid PR title: $PR_TITLE"
            echo "PR title must follow Conventional Commits format:"
            echo "Examples:"
            echo "  - feat: add user authentication system"
            echo "  - fix: resolve login timeout issue"
            echo "  - docs: update API documentation"
            echo "  - chore: update project dependencies"
            exit 1
          fi

          echo "✅ PR title follows conventional commits: $PR_TITLE"

      - name: Check PR description
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Only check length and presence, do not print or eval PR_BODY
          if [[ -z "$PR_BODY" || ${#PR_BODY} -lt 20 ]]; then
            echo "❌ PR description is too short or missing"
            echo "Please provide a meaningful description that includes:"
            echo "  - What changes were made"
            echo "  - Why the changes were necessary"
            echo "  - How to test the changes"
            exit 1
          fi

          echo "✅ PR has adequate description (${#PR_BODY} characters)"

      - name: Check for breaking changes
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Look for breaking changes indicators
          BREAKING_INDICATORS=("BREAKING CHANGE" "breaking change" "breaking:" "BREAKING:")

          HAS_BREAKING=false
          for indicator in "${BREAKING_INDICATORS[@]}"; do
            if [[ "$PR_BODY" == *"$indicator"* || "$PR_TITLE" == *"$indicator"* ]]; then
              HAS_BREAKING=true
              break
            fi
          done

          if [[ $HAS_BREAKING == true ]]; then
            echo "⚠️ Breaking changes detected in PR"
            echo "Please ensure:"
            echo "  - Version bump is appropriate (major version)"
            echo "  - Migration guide is provided"
            echo "  - All stakeholders are notified"
          else
            echo "✅ No breaking changes detected"
          fi

      - name: Check changelog updates
        run: |
          echo "Checking if CHANGELOG.md has been updated..."

          # Get list of changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/main...origin/${{ github.head_ref }})
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if CHANGELOG.md is in the changed files
          if echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
            echo "✅ CHANGELOG.md has been updated"
            echo "ℹ️  Remember to:"
            echo "   - Use semantic versioning (vX.Y.Z)"
            echo "   - Follow Keep a Changelog format"
            echo "   - Include meaningful descriptions of changes"
            echo "   - Organize by Added, Changed, Deprecated, Removed, Fixed, Security"
          else
            echo "⚠️  CHANGELOG.md not updated"
            echo "Please update CHANGELOG.md to document your changes:"
            echo "   1. Add a new entry under [Unreleased] section"
            echo "   2. Describe what was added, changed, fixed, etc."
            echo "   3. Be as detailed or concise as you prefer"
            echo "   4. Semantic-release will handle versioning automatically"
            echo ""
            echo "The changelog helps users and maintainers understand what changed!"
            exit 1
          fi

      - name: Quality checks status
        run: |
          echo "ℹ️  Quality checks are handled by the CI/CD Pipeline workflow"
          echo "📋 This workflow focuses on PR-specific validation only"
          echo "✅ PR format and requirements validated"

      - name: Check for merge conflicts
        run: |
          # Configure git for merge simulation
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Check if PR can be cleanly merged
          git checkout main
          git pull origin main

          # Simulate merge
          if ! git merge --no-commit --no-ff origin/${{ github.head_ref }}; then
            echo "❌ Merge conflicts detected"
            echo "Please resolve conflicts before merging"
            git merge --abort
            exit 1
          fi

          # Abort the merge simulation
          git merge --abort 2>/dev/null || true
          echo "✅ No merge conflicts detected"

      - name: PR Summary
        run: |
          echo "## ✅ PR Format Validation Summary"
          echo "- ✅ Branch name follows convention"
          echo "- ✅ PR title follows conventional commits"
          echo "- ✅ PR has adequate description"
          echo "- ✅ CHANGELOG.md has been updated"
          echo "- ✅ No breaking changes without proper marking"
          echo "- ✅ No merge conflicts detected"
          echo ""
          echo "📋 Code quality validation handled by CI/CD Pipeline"
          echo "🚀 PR format requirements satisfied!"
