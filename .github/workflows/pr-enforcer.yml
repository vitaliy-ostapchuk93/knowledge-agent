name: PR Checklist Enforcer

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Enforce PR requirements
  pr-requirements:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Validate branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Checking branch name: $BRANCH_NAME"

          # Define valid branch prefixes
          VALID_PREFIXES="feature/ bugfix/ hotfix/ chore/ docs/ test/ refactor/"

          # Check if branch follows naming convention
          VALID_BRANCH=false
          for prefix in $VALID_PREFIXES; do
            if [[ $BRANCH_NAME == $prefix* ]]; then
              VALID_BRANCH=true
              break
            fi
          done

          if [[ $VALID_BRANCH == false ]]; then
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "Branch name must start with one of: $VALID_PREFIXES"
            echo "Examples:"
            echo "  - feature/user-authentication"
            echo "  - bugfix/fix-login-issue"
            echo "  - chore/update-dependencies"
            echo "  - docs/improve-readme"
            exit 1
          fi

          echo "✅ Branch name follows convention: $BRANCH_NAME"

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Checking PR title: $PR_TITLE"

          # Define valid PR title prefixes (Conventional Commits)
          VALID_TYPES="feat:|fix:|docs:|style:|refactor:|test:|chore:|perf:|ci:|build:|revert:"

          # Check if title follows conventional commits
          VALID_TITLE=false
          for type in $VALID_TYPES; do
            if [[ $PR_TITLE == $type* ]]; then
              VALID_TITLE=true
              break
            fi
          done

          if [[ $VALID_TITLE == false ]]; then
            echo "❌ Invalid PR title: $PR_TITLE"
            echo "PR title must follow Conventional Commits format:"
            echo "Examples:"
            echo "  - feat: add user authentication system"
            echo "  - fix: resolve login timeout issue"
            echo "  - docs: update API documentation"
            echo "  - chore: update project dependencies"
            exit 1
          fi

          echo "✅ PR title follows conventional commits: $PR_TITLE"

      - name: Check PR description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          if [[ -z "$PR_BODY" || ${#PR_BODY} -lt 20 ]]; then
            echo "❌ PR description is too short or missing"
            echo "Please provide a meaningful description that includes:"
            echo "  - What changes were made"
            echo "  - Why the changes were necessary"
            echo "  - How to test the changes"
            exit 1
          fi

          echo "✅ PR has adequate description"

      - name: Check for breaking changes
        run: |
          # Look for breaking changes indicators
          BREAKING_INDICATORS=("BREAKING CHANGE" "breaking change" "breaking:" "BREAKING:")
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_TITLE="${{ github.event.pull_request.title }}"

          HAS_BREAKING=false
          for indicator in "${BREAKING_INDICATORS[@]}"; do
            if [[ "$PR_BODY" == *"$indicator"* || "$PR_TITLE" == *"$indicator"* ]]; then
              HAS_BREAKING=true
              break
            fi
          done

          if [[ $HAS_BREAKING == true ]]; then
            echo "⚠️ Breaking changes detected in PR"
            echo "Please ensure:"
            echo "  - Version bump is appropriate (major version)"
            echo "  - Migration guide is provided"
            echo "  - All stakeholders are notified"
          else
            echo "✅ No breaking changes detected"
          fi

      - name: Run quality checks
        run: |
          echo "🔍 Running quality checks..."

          # Type checking
          echo "Checking TypeScript compilation..."
          bun run typecheck

          # Linting
          echo "Running ESLint..."
          bun run lint

          # Code formatting
          echo "Checking code formatting..."
          bun run format:check

          echo "✅ All quality checks passed"

      - name: Run tests
        run: |
          echo "🧪 Running test suite..."
          bun test
          echo "✅ All tests passed"

      - name: Run architecture tests
        run: |
          echo "🏗️ Running architecture compliance tests..."
          bun run test:arch
          echo "✅ Architecture compliance verified"

      - name: Check for merge conflicts
        run: |
          # Check if PR can be cleanly merged
          git checkout main
          git pull origin main

          # Simulate merge
          if ! git merge --no-commit --no-ff ${{ github.head_ref }}; then
            echo "❌ Merge conflicts detected"
            echo "Please resolve conflicts before merging"
            git merge --abort
            exit 1
          fi

          # Abort the merge simulation
          git merge --abort 2>/dev/null || true
          echo "✅ No merge conflicts detected"

      - name: PR Summary
        run: |
          echo "## ✅ PR Validation Summary"
          echo "- ✅ Branch name follows convention"
          echo "- ✅ PR title follows conventional commits"
          echo "- ✅ PR has adequate description"
          echo "- ✅ Quality checks passed (lint, format, typecheck)"
          echo "- ✅ All tests passed"
          echo "- ✅ Architecture compliance verified"
          echo "- ✅ No merge conflicts"
          echo ""
          echo "This PR is ready for review! 🚀"
