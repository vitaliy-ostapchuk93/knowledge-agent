name: Dependency Updates

on:
  push:
    paths:
      - 'package.json'
      - 'bun.lock'
      - 'src/**'
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

jobs:
  # Check for Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          bun outdated > outdated-packages.txt 2>&1 || true

          if [ -s outdated-packages.txt ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages:"
            cat outdated-packages.txt
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi

      - name: Update dependencies
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Updating dependencies..."
          # Update based on input type
          case "${{ github.event.inputs.update_type || 'minor' }}" in
            "patch")
              echo "Updating patch versions only..."
              bun update --latest --patch
              ;;
            "minor")
              echo "Updating minor versions..."
              bun update --latest --minor
              ;;
            "major")
              echo "Updating to latest versions (including major)..."
              bun update --latest
              ;;
          esac

      - name: Set git user
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"

      - name: Set git remote with PAT
        if: steps.outdated.outputs.outdated == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}

      - name: Run tests after updates
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Running tests to validate updates..."
          bun test --timeout 30000

      - name: Check TypeScript compilation
        if: steps.outdated.outputs.outdated == 'true'
        run: bunx tsc --noEmit --skipLibCheck

      - name: Create Pull Request
        if: steps.outdated.outputs.outdated == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating dependency update branch..."
          BRANCH="dependency-updates/${{ github.run_id }}"

          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes detected, skipping PR creation"
            exit 0
          fi

          git checkout -b "$BRANCH"
          git add package.json bun.lock
          git commit -m "chore: update dependencies (${{ github.event.inputs.update_type || 'minor' }})"
          git push origin "$BRANCH"
          echo "Creating pull request with gh cli..."
          gh pr create \
            --title "chore: Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})" \
            --body "## Dependency Updates\n\nThis PR updates project dependencies to their latest ${{ github.event.inputs.update_type || 'minor' }} versions.\n\n### Changes\n- Updated dependencies using \`bun update --latest --${{ github.event.inputs.update_type || 'minor' }}\`\n- Verified all tests still pass\n- Confirmed TypeScript compilation succeeds\n\n### Validation\n- âœ… All tests passing\n- âœ… TypeScript compilation clean\n- âœ… No breaking changes detected\n\n### Review Notes\nPlease review the \`package.json\` and \`bun.lock\` changes to ensure no unexpected major version bumps occurred.\n\nAuto-generated by dependency update workflow." \
            --head "$BRANCH" \
            --base "${{ github.ref_name }}"

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        id: audit
        run: |
          echo "Running security audit..."
          bun audit --audit-level high > audit-results.txt 2>&1 || true

          if grep -q "vulnerabilities found" audit-results.txt; then
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "Security vulnerabilities found:"
            cat audit-results.txt
          else
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "No high-severity vulnerabilities found"
          fi

      - name: Create security issue
        if: steps.audit.outputs.vulnerabilities == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating security issue with gh cli..."
          AUDIT_RESULTS=$(cat audit-results.txt)
          gh issue create \
            --title "ðŸš¨ Security vulnerabilities detected in dependencies" \
            --body "## Security Audit Results\\n\\nHigh-severity vulnerabilities have been detected in project dependencies.\\n\\n### Audit Output\\n\\n\`\`\`\\n$AUDIT_RESULTS\\n\`\`\`\\n\\n### Recommended Actions\\n1. Review the vulnerabilities listed above\\n2. Update affected packages to secure versions\\n3. Run \`bun audit\` locally to verify fixes\\n4. Consider using \`bun audit --fix\` for automatic fixes\\n\\n### Auto-Generated\\nThis issue was automatically created by the dependency update workflow."
