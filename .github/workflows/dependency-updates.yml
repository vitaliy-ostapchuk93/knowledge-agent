name: Dependency Updates

on:
  push:
    paths:
      - 'package.json'
      - 'bun.lock'
      - 'src/**'
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Check for Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          bun outdated > outdated-packages.txt 2>&1 || true

          if [ -s outdated-packages.txt ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages:"
            cat outdated-packages.txt
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi

      - name: Update dependencies
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Updating dependencies..."
          # Update based on input type
          case "${{ github.event.inputs.update_type || 'minor' }}" in
            "patch")
              echo "Updating patch versions only..."
              bun update --latest --patch
              ;;
            "minor")
              echo "Updating minor versions..."
              bun update --latest --minor
              ;;
            "major")
              echo "Updating to latest versions (including major)..."
              bun update --latest
              ;;
          esac

      - name: Set git user
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"

      - name: Set git remote with token
        if: steps.outdated.outputs.outdated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      - name: Run tests after updates
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Running tests to validate updates..."
          bun test --timeout 30000

      - name: Check TypeScript compilation
        if: steps.outdated.outputs.outdated == 'true'
        run: bunx tsc --noEmit --skipLibCheck

      - name: Create Pull Request
        if: steps.outdated.outputs.outdated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating dependency update branch..."
          BRANCH="dependency-updates/${{ github.run_id }}"

          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes detected, skipping PR creation"
            exit 0
          fi

          git checkout -b "$BRANCH"
          git add package.json bun.lock
          git commit -m "chore: update dependencies (${{ github.event.inputs.update_type || 'minor' }})"

          # Push with error handling
          if ! git push origin "$BRANCH" 2>&1; then
            echo "‚ùå Failed to push branch. This may be due to insufficient permissions."
            echo "Please ensure the GITHUB_TOKEN has write access to contents and pull requests."
            exit 1
          fi

          echo "‚úÖ Successfully pushed dependency updates to branch: $BRANCH"

          # Try to create PR, but don't fail if it doesn't work (GitHub Actions limitation)
          echo "Attempting to create pull request with gh cli..."
          if gh pr create \
            --title "chore: Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})" \
            --body "## Dependency Updates\n\nThis PR updates project dependencies to their latest ${{ github.event.inputs.update_type || 'minor' }} versions.\n\n### Changes\n- Updated dependencies using \`bun update --latest --${{ github.event.inputs.update_type || 'minor' }}\`\n- Verified all tests still pass\n- Confirmed TypeScript compilation succeeds\n\n### Validation\n- ‚úÖ All tests passing\n- ‚úÖ TypeScript compilation clean\n- ‚úÖ No breaking changes detected\n\n### Review Notes\nPlease review the \`package.json\` and \`bun.lock\` changes to ensure no unexpected major version bumps occurred.\n\nAuto-generated by dependency update workflow." \
            --head "$BRANCH" \
            --base "${{ github.ref_name }}" 2>&1; then
            echo "‚úÖ Successfully created pull request for dependency updates"
          else
            echo "‚ö†Ô∏è Could not create PR automatically (GitHub Actions limitation)"
            echo "üìù Dependency updates have been pushed to branch: $BRANCH"
            echo "üí° You can manually create a PR from this branch if needed"
            echo "üîó Branch URL: https://github.com/${{ github.repository }}/tree/$BRANCH"

            # Add workflow summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üîÑ Dependency Updates Completed

          ‚úÖ **Branch Created**: \`$BRANCH\`
          ‚úÖ **Dependencies Updated**: ${{ github.event.inputs.update_type || 'minor' }} versions
          ‚úÖ **Tests Passed**: All tests are passing
          ‚úÖ **TypeScript**: Compilation successful

          ### üìù Manual Action Required
          Due to GitHub Actions security limitations, the pull request could not be created automatically.

          **Next Steps:**
          1. [View the branch](${{ github.server_url }}/${{ github.repository }}/tree/$BRANCH)
          2. [Create a pull request manually](${{ github.server_url }}/${{ github.repository }}/compare/main...$BRANCH)

          ### üìã Updated Packages
          Check the \`package.json\` and \`bun.lock\` changes in the branch above.
          EOF
          fi

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun Environment
        uses: ./.github/actions/setup-bun

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        id: audit
        run: |
          echo "Running security audit..."
          # Run audit with --no-color to avoid ANSI escape codes
          bun audit --audit-level high --no-color > audit-results.txt 2>&1 || true

          # Check for actual vulnerability patterns
          if grep -E "(vulnerabilities|vulnerability)" audit-results.txt | grep -v "No vulnerabilities found"; then
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "Security vulnerabilities found:"
            cat audit-results.txt
          else
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No high-severity vulnerabilities found"
            # Show the clean results
            cat audit-results.txt
          fi

      - name: Create security issue
        if: steps.audit.outputs.vulnerabilities == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating security issue with gh cli..."

          # Clean up ANSI codes and format the results
          AUDIT_RESULTS=$(cat audit-results.txt | sed 's/\x1b\[[0-9;]*m//g' | sed 's/\x1b\[0m//g')

          # Create a properly formatted issue
          cat > issue-body.md << 'EOF'
          ## Security Audit Results

          High-severity vulnerabilities have been detected in project dependencies.

          ### Audit Output

          ```
          EOF
          echo "$AUDIT_RESULTS" >> issue-body.md
          cat >> issue-body.md << 'EOF'
          ```

          ### Recommended Actions
          1. Review the vulnerabilities listed above
          2. Update affected packages to secure versions
          3. Run `bun audit` locally to verify fixes
          4. Consider using `bun audit --fix` for automatic fixes

          ### Auto-Generated
          This issue was automatically created by the dependency update workflow.
          EOF

          if ! gh issue create \
            --title "üö® Security vulnerabilities detected in dependencies" \
            --body-file issue-body.md 2>&1; then
            echo "‚ùå Failed to create security issue. This may be due to insufficient permissions."
            echo "Please check manually: bun audit --audit-level high"
            echo "Audit results:"
            cat audit-results.txt
            exit 1
          fi
