name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

jobs:
  # Check for Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          bun outdated > outdated-packages.txt 2>&1 || true

          if [ -s outdated-packages.txt ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "Found outdated packages:"
            cat outdated-packages.txt
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi

      - name: Update dependencies
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Updating dependencies..."

          # Update based on input type
          case "${{ github.event.inputs.update_type || 'minor' }}" in
            "patch")
              echo "Updating patch versions only..."
              bun update --latest --patch
              ;;
            "minor")
              echo "Updating minor versions..."
              bun update --latest --minor
              ;;
            "major")
              echo "Updating major versions (use with caution)..."
              bun update --latest
              ;;
          esac

      - name: Run tests after updates
        if: steps.outdated.outputs.outdated == 'true'
        run: |
          echo "Running tests to validate updates..."
          bun test --timeout 30000

      - name: Check TypeScript compilation
        if: steps.outdated.outputs.outdated == 'true'
        run: bunx tsc --noEmit --skipLibCheck

      - name: Create Pull Request
        if: steps.outdated.outputs.outdated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: |
            chore: update dependencies (${{ github.event.inputs.update_type || 'minor' }})

            - Updated dependencies to latest ${{ github.event.inputs.update_type || 'minor' }} versions
            - All tests passing after updates
            - TypeScript compilation verified
          title: "chore: Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})"
          body: |
            ## Dependency Updates

            This PR updates project dependencies to their latest ${{ github.event.inputs.update_type || 'minor' }} versions.

            ### Changes
            - Updated dependencies using `bun update --latest --${{ github.event.inputs.update_type || 'minor' }}`
            - Verified all tests still pass
            - Confirmed TypeScript compilation succeeds

            ### Validation
            - âœ… All tests passing
            - âœ… TypeScript compilation clean
            - âœ… No breaking changes detected

            ### Review Notes
            Please review the `package.json` and `bun.lock` changes to ensure no unexpected major version bumps occurred.

            Auto-generated by dependency update workflow.
          branch: dependency-updates/${{ github.run_number }}
          delete-branch: true

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        id: audit
        run: |
          echo "Running security audit..."
          bun audit --audit-level high > audit-results.txt 2>&1 || true

          if grep -q "vulnerabilities found" audit-results.txt; then
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "Security vulnerabilities found:"
            cat audit-results.txt
          else
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "No high-severity vulnerabilities found"
          fi

      - name: Create security issue
        if: steps.audit.outputs.vulnerabilities == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const auditResults = fs.readFileSync('audit-results.txt', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security vulnerabilities detected in dependencies',
              body: `## Security Audit Results

            High-severity vulnerabilities have been detected in project dependencies.

            ### Audit Output
            \`\`\`
            ${auditResults}
            \`\`\`

            ### Recommended Actions
            1. Review the vulnerabilities listed above
            2. Update affected packages to secure versions
            3. Run \`bun audit\` locally to verify fixes
            4. Consider using \`bun audit --fix\` for automatic fixes

            ### Auto-Generated
            This issue was automatically created by the dependency update workflow.
            `,
              labels: ['security', 'dependencies', 'high-priority']
            });
